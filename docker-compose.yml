version: '3.8'

services:
  # MySQL服务
  mysql:
    image: mysql:8.0
    container_name: data-generator-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: data_generator
      MYSQL_USER: data_generator
      MYSQL_PASSWORD: data_generator
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - data-generator-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka服务
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: data-generator-zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: data-generator-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  # 后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: data-generator-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/data_generator?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: data_generator
      SPRING_DATASOURCE_PASSWORD: data_generator
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - data-generator-network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: data-generator-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - data-generator-network

networks:
  data-generator-network:
    driver: bridge

volumes:
  mysql_data: 